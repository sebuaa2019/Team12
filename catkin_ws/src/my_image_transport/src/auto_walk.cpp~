#include "ros/ros.h"
#include "sensor_msgs/LaserScan.h"
#include "geometry_msgs/Twist.h"

double angleMinLeft,distMinLeft,angleMinRight,distMinRight;

ros::Publisher pub;

void messageCallback(const sensor_msgs::LaserScan::ConstPtr& msg){
    int size = msg->ranges.size();
    //最小range左右索引值获取
    int minIndexLeft = 0;
    int minIndexRight = size/2;

    for(int i=0;i<size/2;i++){
        if(msg->ranges[i] < msg->ranges[minIndexRight] && msg->ranges[i]>0.5){ // 0.1m 以上 最小
            minIndexRight = i;
        }
    }
    for(int i=size/2;i<size;i++){
        if(msg->ranges[i] < msg->ranges[minIndexLeft] && msg->ranges[i]>0.5){
            minIndexLeft = i;
        }
    }
    //计算左右两边最小距离 角度
    angleMinLeft =( minIndexLeft - size/2 ) * msg->angle_increment;
    distMinLeft = msg->ranges[minIndexLeft];
    angleMinRight = (minIndexRight - size/2) * msg->angle_increment;
    distMinRight = msg->ranges[minIndexRight];

    geometry_msgs::Twist speed;
    
    //设置机器人运动角度 速度 （选择距离
    speed.angular.z = distMinLeft < distMinRight? -(2*distMinRight/distMinLeft-2) :  (2*distMinLeft/distMinRight - 2) ;
    speed.linear.x = 0.1;

    if( distMinLeft<0.25 && distMinRight<0.25 && angleMinLeft <0.7 && angleMinRight <0.7){
        speed.angular.z *= 50;
        speed.linear.x *=0.5; 
    }
    pub.publish(speed);
}


int main(int argc, char **argv)
{
    /* code for main function */
    ros::init(argc, argv, "auto_walk");
    ros::NodeHandle n;
    
    pub = n.advertise<geometry_msgs::Twist>("/cmd_vel", 100);

    ros::Subscriber sub = n.subscribe("/scan", 1, messageCallback);
    ros::spin();
  
    return 0;
}
